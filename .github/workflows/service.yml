name: Go

on:
  workflow_call:
    inputs:
      go_version:
        required: false
        type: string
        default: "1.17"
      service_main_file:
        required: false
        type: string
        default: "cmd/server/main.go"
      sqlc:
        required: false
        type: boolean
      sqlc_version:
        required: false
        type: string
        default: "latest"
      test_functional_enabled:
        required: false
        type: string
        default: "true"
      test_functional_wait:
        required: false
        type: string
        default: "10s"
    secrets:
      PRIVATE_GITHUB_USER:
        required: false
      PRIVATE_GITHUB_TOKEN:
        required: false

jobs:
  check-generation:
    name: Check generation
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Granting private modules access
        env:
          USER: ${{ secrets.PRIVATE_GITHUB_USER }}
          TOKEN: ${{ secrets.PRIVATE_GITHUB_TOKEN }}
        run: |
          git config --global url."https://${USER}:${TOKEN}@github.com/setare/".insteadOf "https://github.com/setare/"

      - name: Install SQLC
        # if: ${{ inputs.sqlc == 'true'}}
        run: |
          go install github.com/kyleconroy/sqlc/cmd/sqlc@${{ inputs.sqlc_version }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          go mod download

      - name: Go generate
        run: |
          make generate

      - name: Check if mocks are updated
        uses: setare/git-changes-action@v0.1.4
        with:
          github_token: ${{ github.token }}

  check-build:
    name: Check build
    runs-on: ubuntu-latest
    needs:
      - check-generation
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Granting private modules access
        env:
          USER: ${{ secrets.PRIVATE_GITHUB_USER }}
          TOKEN: ${{ secrets.PRIVATE_GITHUB_TOKEN }}
        run: |
          git config --global url."https://${USER}:${TOKEN}@github.com/setare/".insteadOf "https://github.com/setare/"

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          go mod download

      - name: Check if CMD is buildable
        run: |
          go build ${{ inputs.service_main_file }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs:
      - check-build
      - check-generation
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Granting private modules access
        env:
          USER: ${{secrets.PRIVATE_GITHUB_USER}}
          TOKEN: ${{secrets.PRIVATE_GITHUB_TOKEN}}
        run: |
          git config --global url."https://${USER}:${TOKEN}@github.com/setare/".insteadOf "https://github.com/setare/"

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          go mod download

      - uses: setare/go-lint-action@v0.1.2

  security:
    name: Security checks
    runs-on: ubuntu-latest
    needs:
      - check-build
      - check-generation
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Granting private modules access
        env:
          USER: ${{secrets.PRIVATE_GITHUB_USER}}
          TOKEN: ${{secrets.PRIVATE_GITHUB_TOKEN}}
        run: |
          git config --global url."https://${USER}:${TOKEN}@github.com/setare/".insteadOf "https://github.com/setare/"

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        env:
          GOPRIVATE: github.com/setare
        run: |
          go mod download

      - uses: setare/go-gosec-action@v0.1.0

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs:
      - lint
      - security
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Granting private modules access
        env:
          USER: ${{secrets.PRIVATE_GITHUB_USER}}
          TOKEN: ${{secrets.PRIVATE_GITHUB_TOKEN}}
        run: |
          git config --global url."https://${USER}:${TOKEN}@github.com/setare/".insteadOf "https://github.com/setare/"

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          go mod download

      - name: Unit tests
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

  functional-tests:
    name: Functional tests
    runs-on: ubuntu-latest
    needs:
      - unit-tests
    if: ${{ inputs.test_functional_enabled == 'true' }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Granting private modules access
        env:
          USER: ${{secrets.PRIVATE_GITHUB_USER}}
          TOKEN: ${{secrets.PRIVATE_GITHUB_TOKEN}}
        run: |
          git config --global url."https://${USER}:${TOKEN}@github.com/setare/".insteadOf "https://github.com/setare/"

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          go mod download

      - name: Vendorize dependencies
        run: |
          go mod vendor

      - name: Build image
        run: |
          make docker-build

      - name: Start docker dependencies
        run: |
          make functional-test-up

      - name: Wait service to initialize
        uses: juliangruber/sleep-action@v1
        with:
          time: ${{ inputs.test_functional_wait }}

      - name: Run functional tests
        run: |
          make functional-test-run

      - name: Docker logs
        if: ${{ failure() }}
        run: |
          docker-compose -f test/docker-compose.yml logs > docker.log
      
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Container logs
          path: docker.log
          retention-days: 7


      - name: Stop docker dependencies
        if: ${{ always() }}
        run: |
          make functional-test-down